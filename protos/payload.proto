syntax = "proto3";

import "organization.proto";
import "certificate.proto";
import "request.proto";

message CertificateRegistryPayload{
    enum Action {
        UNSET_ACTION = 0;
        CREATE_AGENT = 1;
        CREATE_ORGANIZATION = 2;
        UPDATE_ORGANIZATION = 3;
        AUTHORIZE_AGENT = 4;
        ISSUE_CERTIFICATE = 5;
        CREATE_STANDARD = 6;
        UPDATE_STANDARD = 7;
        OPEN_REQUEST_ACTION = 8;
        CHANGE_REQUEST_STATUS_ACTION = 9;
        ACCREDIT_CERTIFYING_BODY_ACTION = 10;
    }

    // Whether the payload contains a create agent, create organization,
    // create certificate, or authorize agent.
    Action action = 1;

    // The transaction handler will read from just one of these fields
    // according to the action.
    CreateAgentAction create_agent = 2;
    CreateOrganizationAction create_organization = 3;
    UpdateOrganizationAction update_organization = 4;
    AuthorizeAgentAction authorize_agent = 5;
    IssueCertificateAction issue_certificate = 6;
    CreateStandardAction create_standard = 7 ;
    UpdateStandardAction update_standard = 8;
    OpenRequestAction open_request_action = 9;
    ChangeRequestStatusAction change_request_status_action = 10;
    AccreditCertifyingBodyAction accredit_certifying_body_action = 11;
}

message CreateAgentAction {
    // A human-readable name identifying the agent.
    string name = 1;

    // Approximately when the agent was registered.
    // Format: UTC timestamp
    uint64 timestamp = 2;
}

message CreateOrganizationAction {
  // UUID of the organization.
   string id = 1;

   // Type of the organization.
   Organization.Type organization_type = 2;

   // Name of the organization.
   string name = 3;

   // Initial contact info for the organization.
   repeated Organization.Contact contacts = 4;

   // Address of the organization (if the organization is a Factory).
    Factory.Address address = 5;
}

message UpdateOrganizationAction {
    // Updated contact info.
    repeated Organization.Contact contacts = 1;

    // Updated address (if Factory).
    Factory.Address address = 2;
}

message AuthorizeAgentAction {
    // Public key associated with the agent.
    string public_key = 1;

    // Role to update the specified agent entry.
    // Roles grant permissions for an agent to act on behalf of the
    // organization.
    // Whether the agent is an ADMIN or ISSUER.
    Organization.Authorization.Role role = 2;
}

message IssueCertificateAction {
    enum Source {
        UNSET_SOURCE = 0;
        FROM_REQUEST = 1;
        INDEPENDENT= 2;
    }

    // UUID of the certificate.
    string id = 1;

    // ID of the factory that the certificate is being issued to.
    string factory_id = 2;

    // The source that triggered the IssueCertificate Trasaction.
    // If set to FROM_REQUEST, it means the IssueCertificateAction is associated
    // to a request made by a factory. The field request_id must be set.
    //  If set to INDEPENDENT, it means the IssueCertificateAction is not associated
    //  with a request made by a factory. The field factory_id and standard_id must be set.
    Source source = 3;

    // ID of the request (if source is FROM_REQUEST)
    string request_id = 4;

    // Standard that this certificate is for.
    string standard_id = 5;

    // Additional certificate data.
    repeated Certificate.CertificateData certificate_data = 6;

    // Time certificate was issued.
    // Format: UTC timestamp
    uint64 valid_from = 7;

    // Approximately when the certificate will become invalid.
    // Format: UTC timestamp
    uint64 valid_to = 8;
}

message OpenRequestAction {
    // UUID of the request.
    string id = 1;

    // Standard the factory is requesting certification against.
    string standard_id = 2;

    // Time request was made
    // Format: UTC timestamp
    uint64 request_date = 3;
}

message ChangeRequestStatusAction{
    // UUID of the request
    string request_id = 1;

    // Status that can be changed to either IN_PROGRESS or CLOSED
    Request.Status status = 2;
}

message CreateStandardAction {
    // Sha256 of the standard name
    string standard_id = 1;

    // Name of the standard.
    string name = 2;

    // Current version of the standard.
    string version = 3;

    // Short description of the standard.
    string description = 4;

    // Link to the standard's documentation.
    string link = 5;

    // Date the standard is officially issued.
    uint64 approval_date = 6;

}

message UpdateStandardAction {
    // Standard that is being updated.
    string standard_id = 1;

    // New version of the standard.
    string version = 2;

    // Short description of the standard.
    string description = 3;

    // Link to the standard's documentation.
    string link = 4;

    // Date the standard is officially issued.
    uint64 approval_date = 5;
}

message AccreditCertifyingBodyAction {
    // UUID of the certifying body that is being accredited.
    string certifying_body_id = 1;

    // Standard that the certifying body is being accredited for.
    string standard_id = 2;

    // Time the accreditation was issued.
    // Format: UTC timestamp
    uint64 valid_from = 3;

    // When the accreditation will become invalid.
    // Format: UTC timestamp
    uint64 valid_to = 4;
}
